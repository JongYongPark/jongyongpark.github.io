<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Checker on RyanLabs</title><link>https://jongyongpark.github.io/tags/checker/</link><description>Recent content in Checker on RyanLabs</description><generator>Hugo -- 0.142.0</generator><language>ko-kr</language><lastBuildDate>Mon, 17 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jongyongpark.github.io/tags/checker/index.xml" rel="self" type="application/rss+xml"/><item><title>AUTOSAR C++ A2-10-5</title><link>https://jongyongpark.github.io/posts/checker/autosar-a2-10-5/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/autosar-a2-10-5/</guid><description>&lt;h1 id="autosar-c-a2-10-5-규칙-가이드">AUTOSAR C++ A2-10-5 규칙 가이드&lt;/h1>
&lt;h2 id="목차">목차&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#%EA%B7%9C%EC%B9%99-%EA%B0%9C%EC%9A%94">규칙 개요&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90">핵심 개념&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EC%9C%84%EB%B0%98-%EC%82%AC%EB%A1%80">위반 사례&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95">해결 방법&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EC%83%81%EC%84%B8-%EC%84%A4%EB%AA%85">상세 설명&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EC%B0%B8%EA%B3%A0-%EC%82%AC%ED%95%AD">참고 사항&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="규칙-개요">규칙 개요&lt;/h2>
&lt;p>AUTOSAR C++ A2-10-5 규칙은 다음과 같이 정의됩니다:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;정적 저장 기간을 가진 함수 또는 외부/내부 연결을 가진 비멤버 객체의 식별자 이름은 재사용되어서는 안 된다.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h3 id="규칙의-목적">규칙의 목적&lt;/h3>
&lt;ul>
&lt;li>코드의 명확성과 가독성 향상&lt;/li>
&lt;li>유지보수성 개선&lt;/li>
&lt;li>모호성과 오류 가능성 감소&lt;/li>
&lt;li>자동차 소프트웨어의 안전성 강화&lt;/li>
&lt;/ul>
&lt;h2 id="핵심-개념">핵심 개념&lt;/h2>
&lt;h3 id="1-static-storage-duration-정적-저장-기간">1. Static Storage Duration (정적 저장 기간)&lt;/h3>
&lt;ul>
&lt;li>C++에서 모든 함수는 기본적으로 정적 저장 기간을 가짐&lt;/li>
&lt;li>프로그램 시작부터 종료까지 메모리에 존재&lt;/li>
&lt;li>&lt;code>static&lt;/code> 키워드는 함수의 저장 기간이 아닌 링키지(linkage)를 변경&lt;/li>
&lt;/ul>
&lt;h3 id="2-non-member-object-비멤버-객체">2. Non-member Object (비멤버 객체)&lt;/h3>
&lt;ul>
&lt;li>클래스나 구조체의 멤버가 아닌 변수나 객체&lt;/li>
&lt;li>전역 변수, 네임스페이스 범위 변수, 블록 범위의 정적 변수 등&lt;/li>
&lt;/ul>
&lt;h3 id="3-linkage-연결">3. Linkage (연결)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>External Linkage&lt;/strong>: 다른 번역 단위에서도 참조 가능&lt;/li>
&lt;li>&lt;strong>Internal Linkage&lt;/strong>: 같은 번역 단위 내에서만 참조 가능&lt;/li>
&lt;/ul>
&lt;h2 id="위반-사례">위반 사례&lt;/h2>
&lt;h3 id="1-함수-오버로딩">1. 함수 오버로딩&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 위반 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#a6e22e">my_printf&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;char: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#a6e22e">my_printf&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>string &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> msg) { &lt;span style="color:#75715e">// 위반: 동일 식별자 재사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;string: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, msg.c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-다른-범위에서-식별자-재사용">2. 다른 범위에서 식별자 재사용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 위반 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> globalVar; &lt;span style="color:#75715e">// 외부 링키지를 가진 전역 변수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> globalVar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#75715e">// 위반: 외부 링키지를 가진 식별자 재사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="해결-방법">해결 방법&lt;/h2>
&lt;h3 id="1-함수-이름-구분">1. 함수 이름 구분&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 올바른 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#a6e22e">my_printf_c_string&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;char: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int32_t&lt;/span> &lt;span style="color:#a6e22e">my_printf_cpp_string&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>string &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> msg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> printf(&lt;span style="color:#e6db74">&amp;#34;string: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, msg.c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-변수-이름-구분">2. 변수 이름 구분&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 올바른 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> globalVar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> localGlobalVar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#75715e">// 명확한 이름 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="상세-설명">상세 설명&lt;/h2>
&lt;h3 id="static-storage-duration-vs-automatic-storage-duration">Static Storage Duration vs Automatic Storage Duration&lt;/h3>
&lt;h4 id="static-storage-duration">Static Storage Duration&lt;/h4>
&lt;ul>
&lt;li>프로그램 시작 시점에 생성&lt;/li>
&lt;li>프로그램 종료까지 존재&lt;/li>
&lt;li>초기화되지 않으면 0 또는 nullptr로 자동 초기화&lt;/li>
&lt;/ul>
&lt;h4 id="automatic-storage-duration">Automatic Storage Duration&lt;/h4>
&lt;ul>
&lt;li>선언된 블록 진입 시 생성&lt;/li>
&lt;li>블록 종료 시 파괴&lt;/li>
&lt;li>초기화되지 않으면 값이 불확정 상태&lt;/li>
&lt;/ul>
&lt;h3 id="예시-코드">예시 코드&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 정적 저장 기간
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> globalStaticVar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">staticFunction&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Static function is called&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">exampleFunction&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 자동 저장 기간
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> localAutoVar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 정적 저장 기간
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> localStaticVar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localAutoVar&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localStaticVar&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;localAutoVar: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> localAutoVar &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;localStaticVar: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> localStaticVar &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="참고-사항">참고 사항&lt;/h2>
&lt;h3 id="오해-해소">오해 해소&lt;/h3>
&lt;ul>
&lt;li>함수에 &lt;code>static&lt;/code> 키워드가 없더라도 모든 함수는 기본적으로 정적 저장 기간을 가짐&lt;/li>
&lt;li>C++에서는 함수 오버로딩이 합법적이지만, AUTOSAR C++14는 더 엄격한 안전 기준을 적용&lt;/li>
&lt;/ul>
&lt;h3 id="컴파일-및-검증">컴파일 및 검증&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 일반 컴파일&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g++ -std&lt;span style="color:#f92672">=&lt;/span>c++14 -o test_a2_10_5 test_a2_10_5.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># AUTOSAR 검증&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coverity scan --checker&lt;span style="color:#f92672">=&lt;/span>AUTOSAR test_a2_10_5.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="결론">결론&lt;/h3>
&lt;p>AUTOSAR C++14 Rule A2-10-5는 자동차 소프트웨어의 안전성과 신뢰성을 위해 코드의 명확성을 강조하는 규칙입니다. 식별자의 재사용을 금지함으로써 코드의 가독성과 유지보수성을 향상시킵니다.&lt;/p></description></item><item><title>CERT Cpp Checker</title><link>https://jongyongpark.github.io/posts/checker/cert-cpp-checker/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/cert-cpp-checker/</guid><description>&lt;hr></description></item><item><title>CERT Java Checker</title><link>https://jongyongpark.github.io/posts/checker/cert-java-checker/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/cert-java-checker/</guid><description>&lt;h1 id="cert-ser03-j--do-not-serialize-unencrypted-sensitive-data">CERT SER03-J : Do not serialize unencrypted sensitive data.&lt;/h1>
&lt;p>죄송합니다. 이전에 제공된 정보에서 혼란을 드려 죄송합니다. CERT Java 보안 코딩 표준에서 &lt;strong>SER03-J: 민감한 데이터를 암호화하지 않고 직렬화하지 마십시오&lt;/strong>라는 규칙은 민감한 정보가 직렬화 과정에서 노출되지 않도록 보호하기 위한 지침을 제공합니다.&lt;/p>
&lt;h3 id="취약한-코드-예시">취약한 코드 예시&lt;/h3>
&lt;p>아래 코드는 사용자의 비밀번호를 평문으로 직렬화하여 파일에 저장하는 취약한 예제입니다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.*;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserInfo&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> Serializable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> serialVersionUID &lt;span style="color:#f92672">=&lt;/span> 1L;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String password; &lt;span style="color:#75715e">// 민감한 데이터&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">UserInfo&lt;/span>(String username, String password) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">=&lt;/span> username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">password&lt;/span> &lt;span style="color:#f92672">=&lt;/span> password;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// getter 및 setter 생략&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UserInfo user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UserInfo(&lt;span style="color:#e6db74">&amp;#34;user1&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;password123&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 객체를 파일에 직렬화&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> (ObjectOutputStream oos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ObjectOutputStream(&lt;span style="color:#66d9ef">new&lt;/span> FileOutputStream(&lt;span style="color:#e6db74">&amp;#34;user.ser&amp;#34;&lt;/span>))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oos.&lt;span style="color:#a6e22e">writeObject&lt;/span>(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#a6e22e">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 코드에서는 &lt;code>UserInfo&lt;/code> 객체를 직렬화하여 &lt;code>user.ser&lt;/code> 파일에 저장합니다. 그러나 &lt;code>password&lt;/code> 필드는 암호화되지 않은 상태로 저장되므로, 파일이 유출되면 비밀번호가 노출될 수 있습니다.&lt;/p></description></item><item><title>Hyundai Cpp Checker</title><link>https://jongyongpark.github.io/posts/checker/hyundai-cpp-checker/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/hyundai-cpp-checker/</guid><description>&lt;h1 id="hyundai-mp-oop-011">HYUNDAI MP-OOP-011&lt;/h1>
&lt;p>HYUNDAI MP-OOP-011 룰은 C++ 프로그래밍에서 &lt;strong>클래스의 멤버 변수를 직접적으로 노출하지 말고, 적절한 접근 제어를 통해 캡슐화(encapsulation)를 유지하라&lt;/strong>는 원칙을 강조합니다.&lt;/p>
&lt;h3 id="1-룰의-목적">&lt;strong>1. 룰의 목적&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>데이터 보호&lt;/strong>: 클래스 내부의 데이터가 외부 코드에 의해 직접 수정되는 것을 방지하여 무결성을 유지합니다.&lt;/li>
&lt;li>&lt;strong>유지보수성 향상&lt;/strong>: 데이터 접근을 메서드를 통해 제어함으로써 코드 변경 시 영향 범위를 최소화합니다.&lt;/li>
&lt;li>&lt;strong>캡슐화 준수&lt;/strong>: 객체 지향 프로그래밍의 기본 원칙인 캡슐화를 통해 데이터와 메서드를 하나의 단위로 묶어 관리합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="2-권장-사항">&lt;strong>2. 권장 사항&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>멤버 변수의 접근 제어&lt;/strong>: 모든 멤버 변수를 &lt;code>private&lt;/code> 또는 &lt;code>protected&lt;/code>로 선언하여 외부에서 직접 접근하지 못하도록 합니다.&lt;/li>
&lt;li>&lt;strong>접근자 메서드 제공&lt;/strong>: 필요한 경우, 멤버 변수에 접근하기 위한 &lt;code>getter&lt;/code> 및 &lt;code>setter&lt;/code> 메서드를 제공합니다.&lt;/li>
&lt;li>&lt;strong>불필요한 공개 멤버 제거&lt;/strong>: 외부에서 직접 접근할 필요가 없는 멤버는 공개하지 않습니다.&lt;/li>
&lt;/ul>
&lt;h3 id="3-예시">&lt;strong>3. 예시&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>잘못된 예:&lt;/strong>&lt;/p></description></item><item><title>Hyundai Java Checker</title><link>https://jongyongpark.github.io/posts/checker/hyundai-java-checker/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/hyundai-java-checker/</guid><description>&lt;h1 id="mj-ser-002--do-not-serialize-unencrypted-sensitive-data">MJ-SER-002 : Do not serialize unencrypted sensitive data.&lt;/h1>
&lt;p>CERT SER03-J 에 매핑됨&lt;/p>
&lt;p>&lt;a href="https://documentation.blackduck.com/bundle/coverity-docs-2023.12/page/checker-ref/tables/hyundai-java.html">https://documentation.blackduck.com/bundle/coverity-docs-2023.12/page/checker-ref/tables/hyundai-java.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://documentation.blackduck.com/bundle/coverity-docs/page/checker-ref/tables/sei-cert-java-coding-standard.html">https://documentation.blackduck.com/bundle/coverity-docs/page/checker-ref/tables/sei-cert-java-coding-standard.html&lt;/a>&lt;/p></description></item><item><title>AUTOSAR</title><link>https://jongyongpark.github.io/posts/checker/autosar/</link><pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/checker/autosar/</guid><description>&lt;h1 id="autosar-automotive-open-system-architecture">AUTOSAR (Automotive Open System Architecture)&lt;/h1>
&lt;h2 id="목차">목차&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#autosar-automotive-open-system-architecture">AUTOSAR (Automotive Open System Architecture)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%EB%AA%A9%EC%B0%A8">목차&lt;/a>&lt;/li>
&lt;li>&lt;a href="#autosar-classic-platform">AUTOSAR Classic Platform&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%EB%B2%84%EC%A0%84-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC">버전 히스토리&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#autosar-adaptive-platform">AUTOSAR Adaptive Platform&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%EB%B2%84%EC%A0%84-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-1">버전 히스토리&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#autosar-c-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8">AUTOSAR C++ 가이드라인&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%EC%A3%BC%EC%9A%94-%EB%B2%84%EC%A0%84">주요 버전&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-%ED%8A%B9%EC%A7%95">가이드라인 특징&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%EC%A3%BC%EC%9A%94-%EB%AA%A9%EC%A0%81">주요 목적&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="autosar-classic-platform">AUTOSAR Classic Platform&lt;/h2>
&lt;p>AUTOSAR Classic Platform은 자동차의 기본적인 전자 제어 시스템을 위한 표준입니다.&lt;/p>
&lt;h3 id="버전-히스토리">버전 히스토리&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>버전&lt;/th>
&lt;th>발표 연도&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AUTOSAR 1.0&lt;/td>
&lt;td>2005&lt;/td>
&lt;td>초기 버전&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 2.0&lt;/td>
&lt;td>2006&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 2.1&lt;/td>
&lt;td>2007&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 3.0&lt;/td>
&lt;td>2008&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 3.1&lt;/td>
&lt;td>2008&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 3.2&lt;/td>
&lt;td>2011&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.0&lt;/td>
&lt;td>2009&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.1&lt;/td>
&lt;td>2013&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.2&lt;/td>
&lt;td>2014&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.3&lt;/td>
&lt;td>2016&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.4&lt;/td>
&lt;td>2018&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.5&lt;/td>
&lt;td>2018&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.6&lt;/td>
&lt;td>2020&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AUTOSAR 4.7&lt;/td>
&lt;td>2021&lt;/td>
&lt;td>최신 버전&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="autosar-adaptive-platform">AUTOSAR Adaptive Platform&lt;/h2>
&lt;p>AUTOSAR Adaptive Platform은 고성능 컴퓨팅과 자동화된 운전을 위한 표준입니다.&lt;/p></description></item></channel></rss>