<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on RyanLabs</title><link>https://jongyongpark.github.io/tags/python/</link><description>Recent content in Python on RyanLabs</description><generator>Hugo -- 0.142.0</generator><language>ko</language><lastBuildDate>Fri, 31 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jongyongpark.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python Basic Grammar</title><link>https://jongyongpark.github.io/posts/developer/python-basics/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/python-basics/</guid><description>&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;strong>FastAPI&lt;/strong>, &lt;strong>Flask&lt;/strong>, &lt;strong>Django&lt;/strong>는 모두 &lt;strong>Python&lt;/strong>으로 개발된 인기 있는 웹 프레임워크입니다. 이들 각각은 사용 사례와 목적이 다르며, 성능, 확장성, 사용 편의성 등에서 차이가 있습니다. 각 프레임워크의 특징과 장단점을 비교하여, 어떤 상황에서 어떤 프레임워크가 적합할지 알아보겠습니다.&lt;/p>
&lt;h3 id="1-fastapi">&lt;strong>1. FastAPI&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>특징&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>비동기 처리&lt;/strong>와 &lt;strong>자동화된 데이터 검증&lt;/strong>을 기본으로 지원합니다.&lt;/li>
&lt;li>&lt;strong>Python 3.7+&lt;/strong> 이상에서 사용하는 &lt;strong>type hints&lt;/strong>를 기반으로, &lt;strong>자동 API 문서화&lt;/strong>(Swagger, ReDoc)를 제공합니다.&lt;/li>
&lt;li>&lt;strong>성능&lt;/strong>이 매우 뛰어나며, 특히 &lt;strong>REST API&lt;/strong>나 &lt;strong>GraphQL&lt;/strong> 서버 구축에 적합합니다. &lt;strong>Starlette&lt;/strong>을 기반으로 하여 높은 성능을 자랑합니다.&lt;/li>
&lt;li>&lt;strong>Pydantic&lt;/strong>을 사용한 &lt;strong>데이터 검증&lt;/strong>이 매우 강력하고, 코드의 오류를 컴파일 시점에 잡을 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>장점&lt;/strong>:&lt;/p></description></item></channel></rss>