<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Next.js on RyanLabs</title><link>https://jongyongpark.github.io/tags/next.js/</link><description>Recent content in Next.js on RyanLabs</description><generator>Hugo -- 0.142.0</generator><language>ko</language><lastBuildDate>Fri, 21 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jongyongpark.github.io/tags/next.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Nest.js</title><link>https://jongyongpark.github.io/posts/developer/javascipt/nestjs/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/nestjs/</guid><description>&lt;h1 id="nextjs-와와-springboot-비교">Next.js 와와 SpringBoot 비교&lt;/h1>
&lt;h2 id="속도비교">속도비교&lt;/h2>
&lt;p>&lt;strong>NestJS&lt;/strong>와 &lt;strong>Spring Boot&lt;/strong>는 각각의 장단점이 있지만, &lt;strong>개발 속도&lt;/strong> 측면에서 비교할 때는 &lt;strong>NestJS&lt;/strong>가 더 빠를 수 있는 몇 가지 이유가 있습니다. 다만, 최종 선택은 프로젝트의 요구 사항과 팀의 경험에 따라 달라질 수 있습니다. 아래에서 두 프레임워크를 비교해보겠습니다.&lt;/p>
&lt;h3 id="1-nestjs의-빠른-개발-속도">1. &lt;strong>NestJS의 빠른 개발 속도&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>JavaScript/TypeScript 기반&lt;/strong>: NestJS는 &lt;strong>TypeScript&lt;/strong>를 기본으로 사용합니다. TypeScript는 자바스크립트를 확장한 언어로, 컴파일 시 타입 검사를 제공하여 코드 작성 중 버그를 미리 잡을 수 있습니다. 또한, &lt;strong>JavaScript&lt;/strong>와 &lt;strong>TypeScript&lt;/strong>는 웹 프론트엔드 개발에서 널리 사용되기 때문에, 프론트엔드와 백엔드 개발자들이 &lt;strong>같은 언어&lt;/strong>를 사용할 수 있어 통합 개발 속도가 빨라질 수 있습니다.&lt;/p></description></item><item><title>Next.js - JWT</title><link>https://jongyongpark.github.io/posts/developer/javascipt/nextjs-jwt/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/nextjs-jwt/</guid><description>&lt;h1 id="nextjs-app-with-jwt-based-authentication-and-a-basic-security-setup">Next.js app with JWT-based authentication and a basic security setup&lt;/h1>
&lt;p>Here&amp;rsquo;s how you can create a simple &lt;strong>Next.js&lt;/strong> app with &lt;strong>JWT-based authentication&lt;/strong> and a basic security setup.&lt;/p>
&lt;h3 id="steps-overview">Steps Overview:&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Initialize a Next.js app&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Set up authentication with JWT&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Create login and protected routes&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Add security features&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="1-initialize-nextjs-app">1. Initialize Next.js App&lt;/h3>
&lt;p>Run the following commands to initialize a Next.js app:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npx create-next-app@latest my-nextjs-jwt-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd my-nextjs-jwt-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-install-dependencies">2. Install Dependencies&lt;/h3>
&lt;p>You need additional packages for handling JWT, user authentication, and securing the app:&lt;/p></description></item></channel></rss>