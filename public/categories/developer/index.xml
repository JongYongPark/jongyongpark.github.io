<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Developer on RyanLabs</title><link>https://jongyongpark.github.io/categories/developer/</link><description>Recent content in Developer on RyanLabs</description><generator>Hugo -- 0.142.0</generator><language>ko</language><lastBuildDate>Fri, 21 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jongyongpark.github.io/categories/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Dart</title><link>https://jongyongpark.github.io/posts/developer/dart/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/dart/</guid><description>&lt;h1 id="dart-와-javascript-비교교">Dart 와 JavaScript 비교교&lt;/h1>
&lt;p>Dart와 JavaScript 중 어떤 언어를 배우는 것이 더 좋은지는 &lt;strong>Ryan의 목표와 개발하려는 서비스의 방향&lt;/strong>에 따라 다릅니다.&lt;/p>
&lt;h3 id="-dart를-배우는-것이-좋은-경우">✅ &lt;strong>Dart를 배우는 것이 좋은 경우&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Flutter를 활용한 크로스 플랫폼 앱 개발&lt;/strong>
&lt;ul>
&lt;li>Ryan이 &lt;strong>모바일 앱 개발(특히 iOS &amp;amp; Android)&lt;/strong> 을 목표로 한다면 &lt;strong>Dart + Flutter&lt;/strong> 조합이 유리합니다.&lt;/li>
&lt;li>하나의 코드베이스로 iOS, Android, 웹까지 개발 가능하여 유지보수 비용을 절감할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>안정적이고 타입 안정성이 중요한 경우&lt;/strong>
&lt;ul>
&lt;li>Dart는 정적 타입을 제공하여 코드의 안정성이 높고, 유지보수가 쉬운 편입니다.&lt;/li>
&lt;li>JavaScript보다 더 안전한 프로그래밍이 가능합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Google 생태계에 관심이 있다면&lt;/strong>
&lt;ul>
&lt;li>Dart는 Google이 적극적으로 지원하는 언어이므로, Google 관련 기술과 함께 사용하기 좋습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="-javascript를-배우는-것이-좋은-경우">✅ &lt;strong>JavaScript를 배우는 것이 좋은 경우&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>웹 서비스 개발이 목표라면&lt;/strong>
&lt;ul>
&lt;li>Ryan이 &lt;strong>웹 기반 서비스(프론트엔드 &amp;amp; 백엔드)&lt;/strong> 를 개발하려면 JavaScript가 훨씬 강력한 선택지입니다.&lt;/li>
&lt;li>&lt;strong>React, Vue, Angular&lt;/strong> 등 다양한 웹 프레임워크를 활용할 수 있습니다.&lt;/li>
&lt;li>서버 개발도 &lt;strong>Node.js&lt;/strong> 를 활용해 JavaScript로 가능하므로 전체 개발이 JavaScript로 통일됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>더 많은 오픈 소스 및 커뮤니티 지원을 원한다면&lt;/strong>
&lt;ul>
&lt;li>JavaScript는 웹 개발의 표준이며, 가장 많은 라이브러리와 프레임워크가 존재합니다.&lt;/li>
&lt;li>Dart에 비해 커뮤니티가 훨씬 크며, 문제 해결이 빠릅니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>프론트엔드 개발자가 되고 싶다면&lt;/strong>
&lt;ul>
&lt;li>JavaScript는 웹 브라우저에서 기본적으로 실행되는 언어이므로, &lt;strong>프론트엔드 개발자&lt;/strong> 를 목표로 한다면 필수입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="-결론-ryan에게-적합한-선택">⚖️ &lt;strong>결론: Ryan에게 적합한 선택&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>웹 서비스를 중심으로 개발하려면?&lt;/strong> → &lt;strong>JavaScript&lt;/strong>&lt;/li>
&lt;li>&lt;strong>모바일 앱을 중심으로 개발하려면?&lt;/strong> → &lt;strong>Dart + Flutter&lt;/strong>&lt;/li>
&lt;li>&lt;strong>웹과 모바일을 모두 고려한다면?&lt;/strong>
&lt;ul>
&lt;li>웹이 더 중요하면 &lt;strong>JavaScript&lt;/strong>&lt;/li>
&lt;li>모바일이 더 중요하면 &lt;strong>Dart&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Ryan이 만들고 싶은 서비스가 웹 기반이라면 JavaScript가 더 적합할 가능성이 큽니다.&lt;/strong>&lt;br>
어떤 서비스를 만들고 싶은지 더 구체적으로 이야기해주면 더 적합한 선택을 도와줄 수 있어요!&lt;/p></description></item><item><title>Nest.js</title><link>https://jongyongpark.github.io/posts/developer/javascipt/nestjs/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/nestjs/</guid><description>&lt;h1 id="nextjs-와와-springboot-비교">Next.js 와와 SpringBoot 비교&lt;/h1>
&lt;h2 id="속도비교">속도비교&lt;/h2>
&lt;p>&lt;strong>NestJS&lt;/strong>와 &lt;strong>Spring Boot&lt;/strong>는 각각의 장단점이 있지만, &lt;strong>개발 속도&lt;/strong> 측면에서 비교할 때는 &lt;strong>NestJS&lt;/strong>가 더 빠를 수 있는 몇 가지 이유가 있습니다. 다만, 최종 선택은 프로젝트의 요구 사항과 팀의 경험에 따라 달라질 수 있습니다. 아래에서 두 프레임워크를 비교해보겠습니다.&lt;/p>
&lt;h3 id="1-nestjs의-빠른-개발-속도">1. &lt;strong>NestJS의 빠른 개발 속도&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>JavaScript/TypeScript 기반&lt;/strong>: NestJS는 &lt;strong>TypeScript&lt;/strong>를 기본으로 사용합니다. TypeScript는 자바스크립트를 확장한 언어로, 컴파일 시 타입 검사를 제공하여 코드 작성 중 버그를 미리 잡을 수 있습니다. 또한, &lt;strong>JavaScript&lt;/strong>와 &lt;strong>TypeScript&lt;/strong>는 웹 프론트엔드 개발에서 널리 사용되기 때문에, 프론트엔드와 백엔드 개발자들이 &lt;strong>같은 언어&lt;/strong>를 사용할 수 있어 통합 개발 속도가 빨라질 수 있습니다.&lt;/p></description></item><item><title>Rust Web</title><link>https://jongyongpark.github.io/posts/developer/rust/rust-web/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/rust/rust-web/</guid><description>&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;strong>Rust&lt;/strong>는 시스템 프로그래밍 언어로 높은 성능과 안전성을 제공하지만, &lt;strong>웹 프레임워크&lt;/strong> 측면에서는 여전히 &lt;strong>상대적으로 적은 선택지&lt;/strong>가 있습니다. 그럼에도 불구하고 &lt;strong>Spring Boot&lt;/strong>나 &lt;strong>NestJS&lt;/strong>와 비슷한 &lt;strong>구조적 접근&lt;/strong>을 제공하는 Rust 웹 프레임워크들이 있습니다. 이들 프레임워크는 &lt;strong>모듈화&lt;/strong>, &lt;strong>라우팅&lt;/strong>, &lt;strong>미들웨어 지원&lt;/strong> 등을 제공하며, 일반적으로 &lt;strong>백엔드 API 서버&lt;/strong>나 &lt;strong>웹 애플리케이션&lt;/strong>을 구축할 수 있습니다.&lt;/p>
&lt;p>다음은 &lt;strong>Rust&lt;/strong>에서 Spring Boot나 NestJS처럼 &lt;strong>구조적이고 확장 가능한&lt;/strong> 웹 애플리케이션을 구축할 수 있는 프레임워크들입니다:&lt;/p>
&lt;h3 id="1-actix-web">&lt;strong>1. Actix Web&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>특징&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Actix Web&lt;/strong>은 &lt;strong>고성능&lt;/strong>과 &lt;strong>비동기 처리&lt;/strong>를 지원하는 Rust의 가장 인기 있는 웹 프레임워크입니다. &lt;strong>Spring Boot&lt;/strong>와 비슷하게, 매우 높은 성능을 자랑하면서도 유연한 미들웨어 및 라우팅 기능을 제공합니다.&lt;/li>
&lt;li>&lt;strong>모듈화&lt;/strong>된 &lt;strong>라우팅&lt;/strong>과 &lt;strong>미들웨어&lt;/strong>를 지원하며, &lt;strong>웹 소켓&lt;/strong>, &lt;strong>API 서버&lt;/strong> 등 다양한 서버 애플리케이션을 구현할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>Actors&lt;/strong> 모델을 기반으로 한 &lt;strong>Actix 시스템&lt;/strong>을 제공하여, 복잡한 상태 관리 및 비동기 처리를 유연하게 처리할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>Spring Boot&lt;/strong>와 비슷한 방식으로 &lt;strong>동시성&lt;/strong>을 처리하며, &lt;strong>REST API 서버&lt;/strong>로 매우 적합합니다.&lt;/li>
&lt;li>&lt;strong>타입 안전성&lt;/strong>과 &lt;strong>비동기 I/O&lt;/strong>를 지원하여, 성능과 안정성에서 우수한 결과를 도출할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>장점&lt;/strong>:&lt;/p></description></item><item><title>OpenCV compile on Windows</title><link>https://jongyongpark.github.io/posts/developer/opencv-win/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/opencv-win/</guid><description>&lt;h1 id="claude">Claude&lt;/h1>
&lt;p>이 오류는 ARM64 플랫폼을 위한 CMake 구성 과정에서 발생한 문제입니다. 주요 오류는 프로젝트 설정이 제대로 되지 않았고, ARM64 플랫폼 구성이 올바르지 않다는 것입니다.&lt;/p>
&lt;p>PowerShell 스크립트를 다음과 같이 수정하여 해결할 수 있습니다:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OpenCV Windows Build Script for x64 and ARM64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Prerequisites: Visual Studio 2022, CMake, Git&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$OPENCV_VERSION = &lt;span style="color:#e6db74">&amp;#34;4.9.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$SOURCE_DIR = &lt;span style="color:#e6db74">&amp;#34;C:\workspace\jonpark-work\opencv_source&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$BUILD_BASE_DIR = &lt;span style="color:#e6db74">&amp;#34;C:\workspace\jonpark-work\opencv_build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$INSTALL_BASE_DIR = &lt;span style="color:#e6db74">&amp;#34;C:\workspace\jonpark-work\opencv_install&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Common CMake parameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$CMAKE_COMMON_PARAMS = @(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DCMAKE_MINIMUM_REQUIRED_VERSION=3.10&amp;#34;&lt;/span>, &lt;span style="color:#75715e"># 최소 CMake 버전 지정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_SHARED_LIBS=ON&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_TESTS=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_PERF_TESTS=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_EXAMPLES=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DWITH_CUDA=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_opencv_world=ON&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_opencv_python2=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_opencv_python3=OFF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DWITH_IPP=ON&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DENABLE_CXX11=ON&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DOPENCV_ENABLE_NONFREE=ON&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;-DBUILD_WITH_STATIC_CRT=OFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Download OpenCV source&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">-not&lt;/span> (Test-Path $SOURCE_DIR)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git clone https&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>//github.com/opencv/opencv.git $SOURCE_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Push-Location $SOURCE_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git checkout $OPENCV_VERSION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pop-Location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Function to build OpenCV for specific architecture&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> Build-OpenCV {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">param&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#66d9ef">string&lt;/span>]$arch,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#66d9ef">string&lt;/span>]$generator,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#66d9ef">string&lt;/span>]$platform
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $BUILD_DIR = &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$BUILD_BASE_DIR&lt;span style="color:#e6db74">\&lt;/span>$arch&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $INSTALL_DIR = &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$INSTALL_BASE_DIR&lt;span style="color:#e6db74">\&lt;/span>$arch&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Remove existing build directory to ensure clean build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (Test-Path $BUILD_DIR) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Remove-Item -Path $BUILD_DIR -Recurse -Force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create build directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> New-Item -ItemType Directory -Force -Path $BUILD_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Push-Location $BUILD_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Configure CMake with explicit project name and build type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmake -G $generator -A $platform `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -DCMAKE_INSTALL_PREFIX=&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$INSTALL_DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span> `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -DCMAKE_BUILD_TYPE=Release `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -DOpenCV_ARCH=$platform `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -DOpenCV_RUNTIME=vc17 `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $CMAKE_COMMON_PARAMS `
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -S $SOURCE_DIR -B $BUILD_DIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($LASTEXITCODE &lt;span style="color:#f92672">-ne&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Error &lt;span style="color:#e6db74">&amp;#34;CMake configuration failed for &lt;/span>$arch&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pop-Location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Build and install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmake --build $BUILD_DIR --config Release --target INSTALL --parallel &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($LASTEXITCODE &lt;span style="color:#f92672">-ne&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Error &lt;span style="color:#e6db74">&amp;#34;Build failed for &lt;/span>$arch&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pop-Location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pop-Location
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 빌드 전 Visual Studio 환경 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$VS_PATH = &lt;span style="color:#e6db74">&amp;#34;C:\Program Files\Microsoft Visual Studio\2022\Community&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$VS_TOOLS = &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$VS_PATH&lt;span style="color:#e6db74">\VC\Auxiliary\Build&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (Test-Path &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$VS_TOOLS&lt;span style="color:#e6db74">\vcvarsall.bat&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Host &lt;span style="color:#e6db74">&amp;#34;Setting up Visual Studio environment...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># x64 환경 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd.exe /c &lt;span style="color:#e6db74">&amp;#34;call &lt;/span>&lt;span style="color:#ae81ff">`&amp;#34;&lt;/span>$VS_TOOLS&lt;span style="color:#e6db74">\vcvarsall.bat&lt;/span>&lt;span style="color:#ae81ff">`&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> x64 &amp;amp;&amp;amp; set &amp;gt; %temp%\vcvars.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Get-Content &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$env:temp&lt;span style="color:#e6db74">\vcvars.txt&amp;#34;&lt;/span> | foreach-object {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($_ &lt;span style="color:#f92672">-match&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^(.*?)=(.*)$&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set-Content &lt;span style="color:#e6db74">&amp;#34;env:\&lt;/span>$($matches[&lt;span style="color:#ae81ff">1&lt;/span>])&lt;span style="color:#e6db74">&amp;#34;&lt;/span> $matches[&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Error &lt;span style="color:#e6db74">&amp;#34;Visual Studio environment setup failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Build for x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write-Host &lt;span style="color:#e6db74">&amp;#34;Building for x64...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Build-OpenCV -arch &lt;span style="color:#e6db74">&amp;#34;x64&amp;#34;&lt;/span> -generator &lt;span style="color:#e6db74">&amp;#34;Visual Studio 17 2022&amp;#34;&lt;/span> -platform &lt;span style="color:#e6db74">&amp;#34;x64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ARM64 빌드 전 환경 재설정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (Test-Path &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$VS_TOOLS&lt;span style="color:#e6db74">\vcvarsall.bat&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write-Host &lt;span style="color:#e6db74">&amp;#34;Setting up Visual Studio environment for ARM64...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd.exe /c &lt;span style="color:#e6db74">&amp;#34;call &lt;/span>&lt;span style="color:#ae81ff">`&amp;#34;&lt;/span>$VS_TOOLS&lt;span style="color:#e6db74">\vcvarsall.bat&lt;/span>&lt;span style="color:#ae81ff">`&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> x64_arm64 &amp;amp;&amp;amp; set &amp;gt; %temp%\vcvars.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Get-Content &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$env:temp&lt;span style="color:#e6db74">\vcvars.txt&amp;#34;&lt;/span> | foreach-object {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ($_ &lt;span style="color:#f92672">-match&lt;/span> &lt;span style="color:#e6db74">&amp;#34;^(.*?)=(.*)$&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set-Content &lt;span style="color:#e6db74">&amp;#34;env:\&lt;/span>$($matches[&lt;span style="color:#ae81ff">1&lt;/span>])&lt;span style="color:#e6db74">&amp;#34;&lt;/span> $matches[&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Build for ARM64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write-Host &lt;span style="color:#e6db74">&amp;#34;Building for ARM64...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Build-OpenCV -arch &lt;span style="color:#e6db74">&amp;#34;arm64&amp;#34;&lt;/span> -generator &lt;span style="color:#e6db74">&amp;#34;Visual Studio 17 2022&amp;#34;&lt;/span> -platform &lt;span style="color:#e6db74">&amp;#34;ARM64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>주요 변경사항과 해결방법:&lt;/p></description></item><item><title>Cpp Lamda</title><link>https://jongyongpark.github.io/posts/developer/cpp-lamda/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/cpp-lamda/</guid><description>&lt;h1 id="cpp-lamda-variable-is-private">Cpp Lamda Variable is Private&lt;/h1>
&lt;p>C++에서 람다 함수는 외부 변수들을 캡처하여 내부에서 사용할 수 있습니다. 이때, 캡처된 변수들은 람다 객체의 멤버 변수로 저장되며, 이러한 멤버 변수들은 &lt;strong>컴파일러에 의해 &lt;code>private&lt;/code> 접근 지정자로 선언됩니다&lt;/strong>. 따라서, 람다 객체 외부에서는 이들 멤버 변수에 직접 접근할 수 없습니다.&lt;/p>
&lt;h3 id="예제-코드">예제 코드&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// x를 값으로 캡처하는 람다 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span> lambda &lt;span style="color:#f92672">=&lt;/span> [x]() &lt;span style="color:#66d9ef">mutable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Captured x: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lambda(); &lt;span style="color:#75715e">// Captured x: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> lambda(); &lt;span style="color:#75715e">// Captured x: 11
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 람다 객체의 멤버 변수 x에 직접 접근하려는 시도
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// std::cout &amp;lt;&amp;lt; &amp;#34;Internal x: &amp;#34; &amp;lt;&amp;lt; lambda.x &amp;lt;&amp;lt; std::endl; // 오류: &amp;#39;lambda&amp;#39;의 &amp;#39;x&amp;#39;에 접근할 수 없음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="분석">분석&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>캡처된 변수의 저장&lt;/strong>: 람다 함수 &lt;code>[x]&lt;/code>는 외부 변수 &lt;code>x&lt;/code>를 값으로 캡처하여 람다 객체의 멤버 변수로 저장합니다.&lt;/p></description></item><item><title>React Hook</title><link>https://jongyongpark.github.io/posts/developer/javascipt/react-hook/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/react-hook/</guid><description>&lt;h1 id="react-hook">React Hook&lt;/h1>
&lt;p>React의 함수형 컴포넌트는 매 렌더링마다 컴포넌트 함수를 호출합니다. 이때 React는 내부적으로 **hook 체인(혹은 hook 리스트)**를 유지하며, 각 hook 호출마다 고유한 상태(예: useState의 상태, useEffect의 효과 정보 등)를 저장합니다. 이 구조와 재호출 과정을 자세히 설명하면 다음과 같습니다.&lt;/p>
&lt;hr>
&lt;h3 id="1-hook-체인의-기본-구조">1. Hook 체인의 기본 구조&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Fiber와 Hook 리스트:&lt;/strong>&lt;br>
React는 각 컴포넌트 인스턴스(실제로는 Fiber 노드)에 hook 정보를 저장합니다. 이 정보는 hook들이 호출된 순서대로 배열(혹은 연결 리스트)로 관리되며, 각 hook은 해당 컴포넌트의 렌더링 상태와 관련된 데이터를 보관합니다.&lt;/p></description></item><item><title>React Native</title><link>https://jongyongpark.github.io/posts/developer/javascipt/react-native/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/react-native/</guid><description>&lt;h1 id="react-native-와-react-의-차이">React Native 와 React 의 차이&lt;/h1>
&lt;p>React Native는 React의 개념과 철학을 기반으로 하지만, 주로 모바일 앱 개발(안드로이드와 iOS)을 위해 설계된 프레임워크입니다. 아래에서는 React Native의 주요 특징과 React(Web)와의 차이점을 자세히 설명합니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-react-native란">1. React Native란?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>목적:&lt;/strong>&lt;br>
React Native는 JavaScript와 React의 컴포넌트 기반 아키텍처를 활용하여 네이티브 모바일 앱(안드로이드, iOS)을 개발할 수 있도록 해줍니다.&lt;br>
웹 브라우저가 아닌, 모바일 기기의 네이티브 UI 컴포넌트(예: &lt;code>View&lt;/code>, &lt;code>Text&lt;/code>, &lt;code>Image&lt;/code>)를 사용하여 사용자 인터페이스를 구성합니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>구조 및 실행 방식:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>JS 코드와 네이티브 브리지:&lt;/strong>&lt;br>
React Native 앱은 JavaScript 코드로 작성되며, 이 코드는 JavaScript 엔진(V8, Hermes 등)에서 실행됩니다.&lt;br>
JavaScript와 네이티브 플랫폼 간의 통신은 &amp;ldquo;브리지(Bridge)&amp;ldquo;를 통해 이뤄지며, 이로 인해 JavaScript 코드에서 네이티브 UI 컴포넌트나 기능을 호출할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>플랫폼별 네이티브 컴포넌트:&lt;/strong>&lt;br>
React Native는 플랫폼에 최적화된 네이티브 UI 컴포넌트를 사용하여, 높은 성능과 원활한 사용자 경험을 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-react-web와-react-native의-차이점">2. React (Web)와 React Native의 차이점&lt;/h2>
&lt;h3 id="21-렌더링-대상">2.1 렌더링 대상&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>React (Web):&lt;/strong>&lt;/p></description></item><item><title>Cyclomatic Complexity in C++ Code</title><link>https://jongyongpark.github.io/posts/developer/cyclomatic-complexity-in-c++-code/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/cyclomatic-complexity-in-c++-code/</guid><description>&lt;h1 id="cyclomatic-complexity-in-c-code">Cyclomatic Complexity in C++ Code&lt;/h1>
&lt;p>Cyclomatic Complexity (CCM) is a software metric used to indicate the complexity of a program. It directly measures the number of linearly independent paths through a program&amp;rsquo;s source code. Higher CCM values suggest more complex and potentially less maintainable code.&lt;/p>
&lt;h2 id="ccm-calculation-rules">CCM Calculation Rules&lt;/h2>
&lt;p>Cyclomatic Complexity is calculated based on the control flow graph of the program using the following rules:&lt;/p>
&lt;ol>
&lt;li>Basic Complexity: The simplest program has a CCM of 1.&lt;/li>
&lt;li>Control Flow Branches: Each if, for, while, case, and other control flow statements add to the CCM.&lt;/li>
&lt;li>Logical Operators: Logical operators like &amp;amp;&amp;amp; and || can also increase CCM by introducing additional paths.&lt;/li>
&lt;/ol>
&lt;h2 id="example-c-code-with-ccm-calculation">Example C++ Code with CCM Calculation&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Function declaration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> b, &lt;span style="color:#66d9ef">int&lt;/span> c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> z &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> calculate(x, y, z);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Result: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> result &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Function with high Cyclomatic Complexity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> b, &lt;span style="color:#66d9ef">int&lt;/span> c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> CCM &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">// Basic complexity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If statement 1: CCM += 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;gt;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;a is greater than b&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If-else statement: CCM += 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (b &lt;span style="color:#f92672">&amp;gt;&lt;/span> c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;b is greater than c&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;c is greater than or equal to b&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For loop: CCM += 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Iteration: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// While loop: CCM += 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(count &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Count: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> count &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Switch-case statement: Each case adds to CCM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> option &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span>(option) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Option 1 selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Option 2 selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Option 3 selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default option selected&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Logical operators: Each &amp;#39;&amp;amp;&amp;amp;&amp;#39; or &amp;#39;||&amp;#39; adds to CCM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) { &lt;span style="color:#75715e">// &amp;#39;&amp;amp;&amp;amp;&amp;#39; adds 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Both a and b are positive&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (a &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) { &lt;span style="color:#75715e">// &amp;#39;||&amp;#39; adds 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CCM&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Either a or c is positive&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> CCM;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="code-explanation-and-ccm-calculation">Code Explanation and CCM Calculation&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Basic Complexity:&lt;/p></description></item><item><title>Next.js - JWT</title><link>https://jongyongpark.github.io/posts/developer/javascipt/nextjs-jwt/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/javascipt/nextjs-jwt/</guid><description>&lt;h1 id="nextjs-app-with-jwt-based-authentication-and-a-basic-security-setup">Next.js app with JWT-based authentication and a basic security setup&lt;/h1>
&lt;p>Here&amp;rsquo;s how you can create a simple &lt;strong>Next.js&lt;/strong> app with &lt;strong>JWT-based authentication&lt;/strong> and a basic security setup.&lt;/p>
&lt;h3 id="steps-overview">Steps Overview:&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Initialize a Next.js app&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Set up authentication with JWT&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Create login and protected routes&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Add security features&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h3 id="1-initialize-nextjs-app">1. Initialize Next.js App&lt;/h3>
&lt;p>Run the following commands to initialize a Next.js app:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npx create-next-app@latest my-nextjs-jwt-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd my-nextjs-jwt-app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-install-dependencies">2. Install Dependencies&lt;/h3>
&lt;p>You need additional packages for handling JWT, user authentication, and securing the app:&lt;/p></description></item><item><title>Python Basic Grammar</title><link>https://jongyongpark.github.io/posts/developer/python-basics/</link><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><guid>https://jongyongpark.github.io/posts/developer/python-basics/</guid><description>&lt;h1 id="heading">&lt;/h1>
&lt;p>&lt;strong>FastAPI&lt;/strong>, &lt;strong>Flask&lt;/strong>, &lt;strong>Django&lt;/strong>는 모두 &lt;strong>Python&lt;/strong>으로 개발된 인기 있는 웹 프레임워크입니다. 이들 각각은 사용 사례와 목적이 다르며, 성능, 확장성, 사용 편의성 등에서 차이가 있습니다. 각 프레임워크의 특징과 장단점을 비교하여, 어떤 상황에서 어떤 프레임워크가 적합할지 알아보겠습니다.&lt;/p>
&lt;h3 id="1-fastapi">&lt;strong>1. FastAPI&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>특징&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>비동기 처리&lt;/strong>와 &lt;strong>자동화된 데이터 검증&lt;/strong>을 기본으로 지원합니다.&lt;/li>
&lt;li>&lt;strong>Python 3.7+&lt;/strong> 이상에서 사용하는 &lt;strong>type hints&lt;/strong>를 기반으로, &lt;strong>자동 API 문서화&lt;/strong>(Swagger, ReDoc)를 제공합니다.&lt;/li>
&lt;li>&lt;strong>성능&lt;/strong>이 매우 뛰어나며, 특히 &lt;strong>REST API&lt;/strong>나 &lt;strong>GraphQL&lt;/strong> 서버 구축에 적합합니다. &lt;strong>Starlette&lt;/strong>을 기반으로 하여 높은 성능을 자랑합니다.&lt;/li>
&lt;li>&lt;strong>Pydantic&lt;/strong>을 사용한 &lt;strong>데이터 검증&lt;/strong>이 매우 강력하고, 코드의 오류를 컴파일 시점에 잡을 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>장점&lt;/strong>:&lt;/p></description></item></channel></rss>